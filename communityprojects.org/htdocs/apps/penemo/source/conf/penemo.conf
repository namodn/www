# /usr/local/etc/penemo/penemo.conf : core configuration file for penemo

# enable tier levels. (notify_1, 2 and 3). if this is true, (set to 1),
# then after a notification has been sent to notify_1 the number of
# times in tier_promote, it promotes the notification to notify_2, this
# conitnues the same way till the max, notify_3. if set to 0, no 
# tier'ing is done, and notify_1 is all that is used. 
#
tier_support	1

# sets the number of notifications sent before the tier level is promoted
# to notify_2
# 
tier_promote	3

# notify-method specifies the method in which to notify when errors are
# detected, currently there is: email, and exec.
#
notify_method_1		email
notify_method_2		email
notify_method_3		email

# this sets the level at whitch you wish to be notified. 1 means, notify
# as soon as an error occurs (i.e. can't ping host). 2, would be as soon
# as the same agent has 2 errors. And so on... (a good way to
# "make sure" your not being notified on a false alarm - server lag etc.).
#
notify_level  3

# notify-email specifies the email address to the person who should be
# notified if there is any errors detected. this is (currently) only
# used if notify-method is set to email.
#
notify_email_1	root1@localhost
notify_email_2	root2@localhost
notify_email_3	root3@localhost

# notify_exec specifies the command to run if the notify-method is set to 
# exec. You should specify any needed command line options etc. Penemo will 
# run the fully specified command and add the @notify array (an array of
# any error messages). Note: these error messages (if there are more than one)
# will be more than one line, and therefore this program should take STDIN.
#
#notify_exec_1	<command>	
#notify_exec_2	<command>	
#notify_exec_3	<command>	
#
#-
#- note: notify_exec currently not implemented
#-


# instance_name is a one of a kind name that you specify to differentiate
# between possible different instances of penemo running on different
# internal networks.
#
instance_name  penemo

# this field must be set if you wish to monitor http by fetching from a url
# (set in the agent.conf) the value must be the name of an external program.
# valid programs the penemo supports are (snarf, fetch, wget). Penemo
# takes care of all comand line line arguments, so do not specify any.
#
http_command	wget

# this field sets the snmp community name, used for snmp polls. should
# be fairly self explainitory. for more information, read up on SNMP.
#
snmp_community   public

# you can specify specific paths to any of the following items. If one
# is not specified (commented out etc.) its default will be set based
# on the penemo_dir value. (i.e. if the value dir-cache was not specified
# here, it would be set to penemo_dir/cache)
#
dir_html	/usr/local/share/penemo/html
#dir_html	/var/www/htdocs/html/
dir_cache	/tmp/
dir_data	/usr/local/share/penemo/data
dir_plugin	/usr/local/share/penemo/plugins

# this option is different from the other dir options. value should be
# the cgi-bin path for apache to use in html etc. (so penemo html can 
# access the the penemo-admin.cgi as i.e. /cgi-bin/penemo-admin.cgi)
dir_cgibin	/cgi-bin

# this specifies the amount of tries to ping a host before the host is
# deemed "unreachable". Default is 2 because if set to one, a slight
# lag on the network could result in a bogus page. NOTE: the higher
# this value, the longer penemo will take to run, because it has
# to wait for each attempt to fail before moving on.
#
ping_timeout	1

# this specifies the full path and filename of the penemo executable
# the default value on install is /usr/local/sbin/penemo
#
penemo_bin	/usr/local/sbin/penemo

# this specifies the directory where the UCD-SNMP binaries are located.
# specifically, the command line utilities, like snmpwalk etc.
#
ucd_bin_dir	/usr/local/bin

# when an error_level is >= the notify_level the notify_method is executed.
# this toggle dictates if it should then reset the error level. if it is set
# to 1 it will reset the error level to 0 after an error is detect, this 
# means that it will have to build the error_level back up to the notify_level
# before a second notification is sent. if it's set to 0, it will send a 
# notification for every error for after the first (i.e. if notify_level is 3 
# and error_level reaches 3, then the error_level will not be reset, so the 
# next error will be 4, and a notification will again be sent). once the check 
# is successfull, the error level is always reset to 0. 
#     default is 1
#
notify_errlev_reset	1


